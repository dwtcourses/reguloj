h1. reguloj "!https://secure.travis-ci.org/sebhoss/reguloj.png!":http://travis-ci.org/sebhoss/reguloj "!https://www.ohloh.net/p/reguloj/widgets/project_thin_badge.gif!":https://www.ohloh.net/p/reguloj/


p. *reguloj* is a small and lightweight Java rule engine.

h2. Usage

h3. Creating rule engines

p. A rule engine evaluates a set of rules in a specific context. The @RuleEngines@ utility class offers to build 3 different rule engines:

bc.. // All rules will be evaluated indefinitely until no further rule fires.
final RuleEngine<CONTEXT> chained = RuleEngines.chained();

// All rules will be evaluated, but only a maximum number of 5 times.
final RuleEngine<CONTEXT> limited = RuleEngines.limited(5);

// Evaluates all rules, stops after the first one that fires.
final RuleEngine<CONTEXT> firstWins = RuleEngines.firstWins();

p. If custom inference behavior is required, subclass @AbstractRuleEngine@ and implement the infer() method. The following code example shows how to work with rule engines:

bc.. // setup - more details later
RuleEngine<CONTEXT> engine = ...;
Collection<Rule<CONTEXT>> rules = ...;
CONTEXT context = ...;

// true if at least one rule can fired.
engine.analyze(rules, context);

// perform conclusions of those rules that fired.
engine.infer(rules, context);

h3. Creating rules

p. A "rule":https://github.com/sebhoss/reguloj/blob/master/src/main/java/com/github/sebhoss/reguloj/Rule.java has a (unique) name and runs in a given context. Additionally it can be checked whether a rule fires in a given context.

p. Either implement the @Rule@ interface yourself and or use the supplied rule implementation and builder. A standard rule is composed of a "predicate":https://docs.oracle.com/javase/8/docs/api/java/util/function/Predicate.html and a "consumer":https://docs.oracle.com/javase/8/docs/api/java/util/function/Consumer.html. Both interfaces require you to implement only a single method and do not restrict you in any way. Complex rules can be created by grouping or chaining predicates/consumers together with the help of several utility methods. The following example creates a rule composed of 2 predicates and 2 consumers:

bc.. 
final Rule<CONTEXT> rule = Rules.rule().called(name)
                        .when(predicate1.and(predicate2))
                        .then(consumer1.andThen(consumer2));

// true if the rule would fire in the given context, e.g. the above predicate is true.
rule.fires(context);

// runs (applies) the rule in the given context
rule.run(context);

p. Using Java 8 lambdas is possible as well:

bc. 
final Rule<CONTEXT> rule = Rules.rule().called(name)
                        .when(context -> context.check())
                        .then(context -> context.action())


h3. Creating an inference context

p. An inference "context":https://github.com/sebhoss/reguloj/blob/master/src/main/java/com/github/sebhoss/reguloj/Context.java contains information needed by predicates and/or consumers. This project supplies a simple implementation of the @Context@ interface called @BaseContext@. Subclass @BaseContext@ in case your rules need extra information. The API acknowledges this by using @<CONTEXT extends Context<?>>@ as type parameter for all methods which expect an @Context@. See item 28 in Effective Java for more details.

h3. Integration

p. To use reguloj just declare the following dependency inside your _POM_:

bc. 
<dependency>
  <groupId>com.github.sebhoss</groupId>
  <artifactId>reguloj</artifactId>
  <version>${version.reguloj}</version>
</dependency>

p. Replace @${version.reguloj}@ with the "latest release":http://search.maven.org/#search%7Cga%7C1%7Cg%3Acom.github.sebhoss%20a%3Areguloj

h3. Requirements

|_. Java Version |_. 1.X.Y |_. 2.X.Y |_. 3.X.Y |
| Java 8 | | ✓ | ✓ |
| Java 7 | ✓ | ✓ | |
| Java 6 | ✓ | | |

h2. Development

h3. License

p. This program is free software. It comes without any warranty, to the extent permitted by applicable law. You can redistribute it and/or modify it under the terms of the Do What The Fuck You Want To Public License, Version 2, as published by Sam Hocevar. See "http://sam.zoy.org/wtfpl/COPYING":http://sam.zoy.org/wtfpl/COPYING for more details.

h3. Setup

p. reguloj is using "Maven":http://maven.apache.org/, "Eclipse":http://eclipse.org/ and "Git":http://git-scm.com/ as the main development tools. To build the project yourself just download & install at least Maven 3.0 and call *mvn install* inside the project folder. Maven should then proceed to clean, test, build, package and install the business rules engine.

h3. Versioning

p. reguloj follows the "semantic versioning":http://semver.org/ guidelines.