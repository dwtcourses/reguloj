h1. reguloj

p. *reguloj* is a small and lightweight Java rule engine. It is suitable for mobile applications running "Android":http://www.android.com/ and/or other restricted environments such as "GWT":http://code.google.com/webtoolkit/.

h2. Usage

h3. Creating rules

p. A rule is composed of a "predicate"::http://guava-libraries.googlecode.com/svn/trunk/javadoc/com/google/common/base/Predicate.html, "conclusion":https://github.com/sebhoss/reguloj/blob/master/src/main/java/com/github/sebhoss/reguloj/Conclusion.java and a name.

p. Both interfaces require you to implement only a single method and do not restrict you in any way. Complex rules can be created by grouping or chaining predicates/conclusions together with the help of several utility methods. The following example creates a rule composed of 2 predicates and 2 conclusions while using static imports:

bc. 
final Rule rule = rule().called(name)
                        .when(and(predicate1, predicate2))
                        .then(conclude(conclusion1, conclusion2))

h3. Evaluating rules

p. A @Set@ of @Rule@ objects are evaluated by a @RuleEngine@ in a specific @Context@. The following example shows how to do it:

bc. 
Context<X> context = ...;
Set<Rule<Context<X>>> rules = ...;
RuleEngine<Context<X>> engine = ...;

bc. 
engine.analyze(context, rules); // true if at least one rule can fired.

bc. 
engine.infer(context, rules); // perform conclusions of those rules that fired

This project provides a simple implementation of the @RuleEngine@ interface and a set of rules can be created with the standard Java library. The @Context@ however may need some more work.

p. In case only the _topic_ of the context is needed, you can call the available interface method directly. However it may be necessary that some sort of contextual information is needed inside predicates and conclusions. The @Context@ is the way to make those informations available. During our internal development, we created an Android specific context which was tailored to our domain and thus provides methods to e.g. get the current GPS coordinates. Since those methods won't work in an environment which does not have access to a GPS sensor (or any other domain specific functionality) we decided to leave those out. The API further acknowledges this by using @<C extends Context<?>>@ as type parameter for all methods which expect an @Context@. See item 28 in "Effective Java":http://java.sun.com/docs/books/effective/ for more details.

h3. Integration

p. To use reguloj just declare the following dependency inside your _POM_:

bc. 
<dependency>
  <groupId>com.github.sebhoss</groupId>
  <artifactId>reguloj</artifactId>
  <version>1.0.0-SNAPSHOT</version>
</dependency>

p. Alternatively copy the latest _JAR_  from our "download archive":https://github.com/viadee/viaRules/downloads to your projects library folder and put it in your classpath.

h2. Development

h3. License

p. reguloj is licensed under the "Apache Software License, Version 2.0":http://www.apache.org/licenses/LICENSE-2.0/.

h3. Setup

p. reguloj is using "Maven":http://maven.apache.org/, "Eclipse":http://eclipse.org/ and "Git":http://git-scm.com/ as the main development tools. To build the project yourself just download & install at least Maven 3.0 and call *mvn install* inside the project folder. Maven should then proceed to clean, test, build, package and install the business rules engine.

h3. Versioning

p. reguloj follows the "semantic versioning":http://semver.org/ guidelines.